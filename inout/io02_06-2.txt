2

; =============== Problem 1 可見數據 ====================
(define a "=============== Problem 1 viewable case =================")
a

(clean-environment)

; when the being evaluated S-expr is an atom, the result is that atom
; (in our standard print-form)

(list 3 '(4 5))
(list 3 
        '(4 5) 
        6 
        '(7 8))
3
+3
+3.5

; when a function is being evaluated, the parameters of this function
; are evaluated BEFORE this function is "applied" 
; to the evaluated results (of the parameters)

; 1. A list (or rather, a dotted pair) is CONSTRUCTED.

(cons 3 4)     ; an operation on two objects
(cons 3
      nil
)            ; '(3 . nil)' = '(3)'
(cons 30
      ()
)            ; same thing
(cons 300
      #f
)            ; same thing
()
-.12549
"Hi\n\""""
(cons () nil)(cons #f #f)(cons nil ())
(list 1 2 3)(list nil 2 3 #f)

; 2. quote - a way to "by pass" the default interpretation of an S-exp

'(3 4 5)'()
(quote (3 (4 5)))

(cons 3 '(4321 5))

        
; 3. To give a (symbolic) name to an object

; Meaning of DEFINE revisited ("令")

; Basically, DEFINE establishes a (temporary) binding between a symbol 
; and (the internal representation of) an S-expression

(define a 5)   ; "令a為5"; 讓我們把"那個東西"又稱為'a'
(define b (cons 3 5))
b             ; Is 'b' a name of some thing?
a             ; Is 'a' a name of some thing?
(define x '((3 4) 5))   ; 讓我們把"那個東西"又稱為'x'
x              ; Is 'x' a name of some thing?
(car '((3 4) "Merry Christmas!" . 6)  )
(cdr '((3 4) "Merry Christmas!" . 6)  )
(car '((3 4) . "Happy New Year!")  )

; Combining (1), (2) and (3)

(define a '(30 40))
a
(cons 5 a)

(define hello '(1 2 . 3))
(list hello hello)   
(cons hello 
      4
)  
(cons 10 #f)     
(cons hello 
      '(4)
)    
(cdr '(3 . 4))  ; the "right part" of a dotted pair
(car '(3 4 5))    
(cdr '(3 4 5))
hello
(define hello "\"CYCU ICE\"")
(list hello hello '(100))
(cons hello 
        '(400 (5000 600) 70)
  )       
(car a)
(cdr a)
(define there "Number One!")
(list hello there)

; Whenever a function is called, its parameters are evaluated BEFORE
; the function is "applied" to the evaluated results of the parameters ;  
; However, this requires that (the evaluated result of) the first 
; component of the being-evaluated list must be bound to a function ;
; if (the evaluated result of) the first component of the being-evaluated list
; is not bound to a function in the first place, the evaluation process 
; stops, and an appropriate error message is issued.

; 4. Different parts of a list (or a dotted pair) can be 
;    individually accessed (by using 'car' and 'cdr')

(cdr '((3 4) "Happy New Year!")  )
(cdr '((3 4) . "Happy New Year!")  )
(car '(3 . 4))  ; the "left part" of a dotted pair
(car '((3 4) "Happy New Year!")  )

; =============== Problem 2 可見數據 ====================
(define a "=============== Problem 2 viewable case =================")
a

(clean-environment)

; 8. eqv? and equal?

; eqv? returns "true" only when the two being compared
; objects are atoms (except in the case of strings)
; or when the two being compared objects "occupy the
; same memory space".

; equal?, on the other hand, is the usual notion of 
; equality comparison

(eqv? 3 3)
(define a '((3 (4 5))))
a
(eqv? a a)
(eqv? a '((3 (4 5))))
(equal? a '((3 (4 5))))
(define b a)
(eqv? a b)
(define c '((3 (4 5))))
(eqv? a c)
(equal? a c)
(eqv? '((3 (4 5))) '((3 (4 5))))
(eqv? "Hi" "Hi")
(equal? a a)
(equal? '((3 (4 5))) '((3 (4 5))))
(equal? '((3 (4 5))) '(3 4 5))
(equal? "Hi" "Hi")

; 5. Primitive predicates (A predicate is a function that returns
;      #t or nil (i.e., #f); By convention, the name of a predicate
;      should have a suffix '?')

(/ 15.0 3)
(/ 15 2)
(/ 15.0 2)
(/ 15 2.0)
(/ 45 3 5 2)
(+ 15.125 4)
(not #t)
(not 3)
(not '(1 2))
(pair? 3)      ; Other Lisps may not have PAIR?; they have ATOM? and LIST?
(pair? '(3 4))
(pair? '(3 . 4))
(pair? "Hello, there!")
(string? "Hi")
(string? +3.4)
(<= 3.125 2)
(<= 2 2 2 2 2 2 2 2)
(= 2 2 2)
(boolean? #t)
(boolean? ())
(boolean? #f)
(boolean? '(3 . 4))
(symbol? 'abc)
(symbol? 3)
(define America '(U. S. A.))
(symbol? America    ; Once the symbol America is evaluated,
  )                 ; do we get a symbol?
(pair? America)     ; does the binding of >>America<< starts with a cons-cell?
(boolean? America)

; 6. Basic arithmetic, logical and string operations

(+ 3 7 10)
(- 3 7 10)   ; the result of int OPR int is int
(+ 3 7.5 10) ; the result of int OPR float is float
(- 3 7.5 10) ; order of evaluation is left associative (i.e., from left to right)
(* 3 4)
(* 3 4.5 5)
(define a 5)
(/ 15 a)     ; be careful! there may be DIVISION BY 0
(/ 7 a)
(not ())
(not nil)
(> 3 2)
(> 5 3 1)
(string-append "\"Hello," " there!\"")
(string-append "Hello," " there!" " Wait!")
(string>? "az" "aw")
(string>? "az" "aw" "ax")
(string>? "az" "aw" "atuv")
(null? ())     ; is it the empty list?
(null? #f)     ; #f = nil = ()
(null? '(3 . 4))
(integer? 3)
(integer? 3.4)
(integer? -.4)
(real? +3)
(real? 3.4)
(real? .5)
(number? 3)
(number? 3.4)
(> 5 3 5)
(> 3.125 2 -5)
(>= 3.25 2 2)
(< 3.125 2 4)
(= 2 3 2)
(= 2 a)
(= 2 a a)
(>= a a a)

; =============== Problem 3 可見數據 ====================
(define a "=============== Problem 3 viewable case =================")
a

(clean-environment)

; more 搞怪examples

(define a 10)
(define b 20)

(cond ((> a b) 3)
      (#f 4)
      (else 5)
) ; should get 5

(define else '(1 2))

else ; should get >>(1 2)<<

(cond ((> b 100) 3)
      (else 4)
      (else 5)
) ; should get 4

(cond ((> a 100) 3)
      ((not else) 4)
      (else else)
) ; should get >>(1 2)<<

(define else #f)

(cond ((> a b) 1)
      (else 2)
      (else else)
) ; should get nil

; 9. Conditionals

(define a 5)
(if a 'good 'bad)
(if (not a) 'good 'bad)
(define a nil)
(if a '(1 2) '(3 4))
(if (not a) '((1 (2) 1) 1) '((3) (4 3)))
(if (not a) '((1 (2) 1) 1) )
(define b 4)
(cond ((> 3 b) 'bad)
      ((> b 3) 'good)
      (else "What happened?") ; note that 'else' is a keyword in OurScheme ; 
)                             ; however, it is not a primitive
(define else #t) ; a non-primitive symbol can always have a binding
(cond ((> 3 b) 'bad)
      (else 'good)            ; this 'else' is a "normal" symbol
      ((> b 3) 'ok)
)
(if (> 3 2) 'good 'bad)
(if (> 3 2) 'good)
(define else #f)
(cond ((> 3 b) 'bad)
      (else 'good)            
      ((> b 3) 'ok)
)
(cond ((> 3 b) 'bad)
      ((> b 5) 'bad)
      (else "What happened?") ; only when being here is 'else' a keyword
)
(cond ((> 3 b) 'bad)
      ((> b 5) 'bad)
      (#t "What happened?")   ; can also use #t to mean "in all other cases"
)
(cond (#t 3))
(cond ((> 3 4) 'bad)
      ((> 4 3) 'good)
)
(cond ('(3 4) 'bad)
      ((> 4 3) 'good)
)
(cond (5 'bad)
      ((> 4 3) 'good)
)
(if 1 2 3)
(if (cons 1 2) 3 4)
(if nil 3 4)
(if #t 3 4)


; =============== Problem 4 可見數據 ====================
(define a "=============== Problem 4 viewable case =================")
a

(clean-environment)

; ------- functional compositions (same category) -------

(define hello "\"CYCU ICE\"")
(define there "Number One!")
(cons (car (list hello there)) there)

(define a '(30 40))
a
(cons 5 a)
(define a (cons 3 a))
(cons (cons 5 a) a)
a
(cdr (list a a (car (car (cons a a)))))
(car (car (cons a a)))
(define a (cdr (list a a (car (car (cons a a)))))
)
(car (cdr a))
(begin 3)
(begin 3 4 5)
(cons (car (cdr (cdr (car a))))
      (cdr a)
)
(begin 
   (car '(1 2 3))
   (cdr '(1 2 3))
)

(begin
   (list '(1 2 3))
)

(define a
 (list (car (cdr a))
       (cons (car (cdr (cdr (car a))))
             (cdr a)
       )
       (car (cdr a))
 )
)
a
(define b a)
(define b (cons (list a b) a))
b
(cons (car b) (car (cdr b)))

; ------- functional compositions (same category) -------

(define a 5)
(define b 10)
(define c 20)
(define list1 '(11 22 33))
(define list2 '(12 23 34))
(define str1 "abc")
(define str2 (string-append "d" "de"))
(string>? (string-append "Hello" str1)
          str2
)
(define var1
 (- ( + (- a b) (* c a 3) 
    )
    (* a (+ b c (car list1)))
    (car (cdr list2))
 )
)
(>= var1 (car (cdr (cdr list2))))
(not (> a 3))
; etc.

; ------- functional compositions (different categories) -------

(if (not (> a b))
    (* a
      (+ (car list1)
         (car (cdr list2)))
    )
    (* b
      (+ (car list2)
         (car (cdr list1)))
    )
)
(cons
  (cons (+ 30 50)
        (cdr '(The sun shines bright))
  )
  (list (null? '())
        (pair? '(30 (40)))
        (- (+ 5 7) (+ 2 3))
        '(1 2 . (3))
  )
)
(if (> a b)
    (* a
      (+ (car list1)
         (car (cdr list2)))
    )
    (* b
      (+ (car list2)
         (car (cdr list1)))
    )
)

(define d 20)
(begin
   3 4 d)
(begin
   (+ 3 5)
   (- 4 5)
   (* d d)
)
(define a 20)
(define b 40)
(list
     ( if (> a b)
          (+ a (* a b))
          (- b (+ a a))
     )

          ( begin
            (- b (+ a a))
            (> 70 b)
          )
)
(if #t (begin 3 4 5))
(cond ((> 5 3) 'good 'better 'best) (#t 'OK?)   )
(define a (+ a b a))

(cond ( (< a b) 
        (+ a b) (- a b) (- a Look!) (* a b)
      ) 
      (  else
         ( list 'OK? 'Correct? )
         ( cons 'OK? 'Correct? ) 
      )   
)
(cond ( (> a b) (+ a b) (- a b) (* a b) ) 
      (  else 'OK? )   
)

; =============== Problem 5 可見數據 ====================
(define a "=============== Problem 5 viewable case =================")
a

(clean-environment)

; ------- Some newly added stuff -------

; In OurScheme (and Lisp too), there is no discrimination against 
; functions

cons ; the binding of this (primitive) symbol is a function
car  ; the binding of this (primitive) symbol is also a function

(define myCons cons) ; just like int/float/string can be the binding
(define myCar car)   ; of a symbol, a function can be a binding too

myCons ; what is the (current) binding of this symbol?

(myCons cons myCar) ; the evaluated result of 'myCons' is a function
(myCons 3 '(4 myCar))

((myCar (cons myCons cons)) '(10) 20)





(cdr (car (cons '(That is the question !) ()
          )
     )
)
((myCar (cons myCons cons)) 
 (cdr (cdr '(Hi! (How is) (it) going ?))))

(cons 'Whether (cdr (cdr '(To be or not to be ?)))
)

(cdr (cdr (list "Hi," " Everybody!" "Wake up!")))
(begin 
   (myCar '(1 2 3))
   (cdr '(1 2 3))
   (car (cdr '(1 (20 myCons))))
)

(begin
   (list (list 1 - 3 +)
         (myCons 25 car)
   )
)
(define sun-shine '(The sun shines bright))
(define money 50)

(cons (- (+ 30 money) 40)
      (cdr (cdr sun-shine))
)
(define a 20)
(define d 20)
(define b 40)
(if (> a (+ b d))
    +
    /
)
(+ d
   ( if (> a b)
        (+ a (* a b))
        ( begin
          (- b (+ a a))
          70
        )
   )
)
(if #t (begin 3 4 a) (begin 6 7))
(cond ( (> b a) "Good" "Better" "Best") 
        ( else 'Never 'let 'it 'rest!)   )
(+ d
   ( if (> a b)
        (+ a (* a b))
        (- b (+ a a))
   )
)
(define a (+ a b a))

(cond ( (< a b) 
        (+ a b) (- a b) (- a Look!) (* a b)
      ) 
      (  #t 
         ( list
                ( list 'OK? 'Correct? )
                ( list 'OK? 'Correct? )
         ) 
      )   
)
(cond ( (> (* a 2) (* b 2)) (+ a b) (+ (- a b) (* a b)) ) 
      ( (> a b) Look! )
      ( (< 20 10) It's a bird !)
      (  It's a plane ! ) 
      (  #t It's Superman !  )
)

; =============== Problem 6 可見數據 ====================
(define a "=============== Problem 6 viewable case =================")
a

(clean-environment)


(define listOfStr '("What?" "When?" "Where?" "Who?" "How?" "Why?" "How come?") 
)
(define listOfNum '(10.1254 20.318503 30.1 40.2 50 60 70 80.999 90.9)
)
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)

(define operators (list + - * /))
(define abc operators)
((car abc) 100 200)
( (car (cdr operators))
  ((car operators) 10 20)
  ((car (cdr (cdr operators))) 11 22)
)
abc

(cons (car listOfSym)
      (cons (car (cdr listOfStr))
            (list (car (cdr (cdr listOfNum))))
      )
)
(cons (car (cdr (cdr listOfNum)))
      (cons (car (cdr listOfStr))
            (list (car listOfSym))
      )
)
( - ( + (car listOfNum)
        (car (cdr listOfNum))
        (car (cdr (cdr listOfNum)))
    )
    ( if ( string>? (car listOfStr) (car (cdr listOfStr))
         )
         10
         15
    )
)
(define abc
  (list
    (cons (car listOfSym)
          (cons (car (cdr listOfStr))
                (list (car (cdr (cdr listOfNum))))
          )
    ) ; cons
    (cons (car (cdr (cdr listOfNum)))
          (cons (car (cdr listOfStr))
                (list (car listOfSym))
          )
    ) ; cons
  ) ; list
) ; define
abc
(cons (car (car abc))
      (cdr abc)
)

(define efg
  (cons (car abc)
        (car (cdr abc))
  )
)
efg
abc
( + (car listOfNum)
    (car (cdr listOfNum))
    (car (cdr (cdr listOfNum)))
)
(define What? (car listOfNum))
(define When? (car (cdr listOfNum)))
listOfSym
( cons (list (car listOfSym)
             What?
       )
       (cdr listOfSym)
)
listOfSym
(define listOfSym
        ( cons (list (car listOfSym)
                     What?
               )
               (cdr listOfSym)
        )
)
listOfSym
( cons (car listOfSym)
       ( cons (list (car (cdr listOfSym))
                    When?
              )
              (cdr (cdr listOfSym))
       )
)
listOfSym
(define listOfSym
        ( cons (car listOfSym)
               ( cons (list (car (cdr listOfSym))
                            When?
                      )
                      (cdr (cdr listOfSym))
               )
        )
)
listOfSym
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
  )
listOfSym
(define listOfSym
        ( cons (list (car listOfSym)
                     (car listOfNum)
               )
               (cdr listOfSym)
        )
)
listOfSym
(define listOfSym
        ( cons (car listOfSym)
               ( cons (list (car (cdr listOfSym))
                            (car (cdr listOfNum))
                      )
                      (cdr (cdr listOfSym))
               )
        )
)
listOfSym
(exit)


-----------------------------------------------------------
Welcome to OurScheme!

> a defined

> "=============== Problem 1 viewable case ================="

> environment cleaned

> ( 3
  ( 4
    5
  )
)

> ( 3
  ( 4
    5
  )
  6
  ( 7
    8
  )
)

> 3

> 3

> 3.500

> ( 3
  .
  4
)

> ( 3
)

> ( 30
)

> ( 300
)

> nil

> -0.125

> "Hi
""

> ""

> ( nil
)

> ( nil
)

> ( nil
)

> ( 1
  2
  3
)

> ( nil
  2
  3
  nil
)

> ( 3
  4
  5
)

> nil

> ( 3
  ( 4
    5
  )
)

> ( 3
  4321
  5
)

> a defined

> b defined

> ( 3
  .
  5
)

> 5

> x defined

> ( ( 3
    4
  )
  5
)

> ( 3
  4
)

> ( "Merry Christmas!"
  .
  6
)

> ( 3
  4
)

> a defined

> ( 30
  40
)

> ( 5
  30
  40
)

> hello defined

> ( ( 1
    2
    .
    3
  )
  ( 1
    2
    .
    3
  )
)

> ( ( 1
    2
    .
    3
  )
  .
  4
)

> ( 10
)

> ( ( 1
    2
    .
    3
  )
  4
)

> 4

> 3

> ( 4
  5
)

> ( 1
  2
  .
  3
)

> hello defined

> ( ""CYCU ICE""
  ""CYCU ICE""
  ( 100
  )
)

> ( ""CYCU ICE""
  400
  ( 5000
    600
  )
  70
)

> 30

> ( 40
)

> there defined

> ( ""CYCU ICE""
  "Number One!"
)

> ( "Happy New Year!"
)

> "Happy New Year!"

> 3

> ( 3
  4
)

> a defined

> "=============== Problem 2 viewable case ================="

> environment cleaned

> #t

> a defined

> ( ( 3
    ( 4
      5
    )
  )
)

> #t

> nil

> #t

> b defined

> #t

> c defined

> nil

> #t

> nil

> nil

> #t

> #t

> nil

> #t

> 5.000

> 7

> 7.500

> 7.500

> 1

> 19.125

> nil

> nil

> nil

> nil

> #t

> #t

> nil

> #t

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> nil

> #t

> nil

> America defined

> nil

> #t

> nil

> 20

> -14

> 20.500

> -14.500

> 12

> 67.500

> a defined

> 3

> 1

> #t

> #t

> #t

> #t

> ""Hello, there!""

> "Hello, there! Wait!"

> #t

> nil

> #t

> #t

> #t

> nil

> #t

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> nil

> #t

> #t

> nil

> nil

> nil

> nil

> #t

> a defined

> "=============== Problem 3 viewable case ================="

> environment cleaned

> a defined

> b defined

> 5

> else defined

> ( 1
  2
)

> 4

> ( 1
  2
)

> else defined

> nil

> a defined

> good

> bad

> a defined

> ( 3
  4
)

> ( ( 1
    ( 2
    )
    1
  )
  1
)

> ( ( 1
    ( 2
    )
    1
  )
  1
)

> b defined

> good

> else defined

> good

> good

> good

> else defined

> ok

> "What happened?"

> "What happened?"

> 3

> good

> bad

> bad

> 2

> 3

> 4

> 3

> a defined

> "=============== Problem 4 viewable case ================="

> environment cleaned

> hello defined

> there defined

> ( ""CYCU ICE""
  .
  "Number One!"
)

> a defined

> ( 30
  40
)

> ( 5
  30
  40
)

> a defined

> ( ( 5
    3
    30
    40
  )
  3
  30
  40
)

> ( 3
  30
  40
)

> ( ( 3
    30
    40
  )
  3
)

> 3

> a defined

> 3

> 3

> 5

> ( 40
  3
)

> ( 2
  3
)

> ( ( 1
    2
    3
  )
)

> a defined

> ( 3
  ( 40
    3
  )
  3
)

> b defined

> b defined

> ( ( ( 3
      ( 40
        3
      )
      3
    )
    ( 3
      ( 40
        3
      )
      3
    )
  )
  3
  ( 40
    3
  )
  3
)

> ( ( ( 3
      ( 40
        3
      )
      3
    )
    ( 3
      ( 40
        3
      )
      3
    )
  )
  .
  3
)

> a defined

> b defined

> c defined

> list1 defined

> list2 defined

> str1 defined

> str2 defined

> nil

> var1 defined

> #t

> nil

> 170

> ( ( 80
    sun
    shines
    bright
  )
  #t
  #t
  7
  ( 1
    2
    3
  )
)

> 340

> d defined

> 20

> 400

> a defined

> b defined

> ( 0
  #t
)

> 5

> best

> a defined

> ( OK?
  .
  Correct?
)

> 3200

> a defined

> "=============== Problem 5 viewable case ================="

> environment cleaned

> #<procedure cons>

> #<procedure car>

> myCons defined

> myCar defined

> #<procedure cons>

> ( #<procedure cons>
  .
  #<procedure car>
)

> ( 3
  4
  myCar
)

> ( ( 10
  )
  .
  20
)

> ( is
  the
  question
  !
)

> ERROR (incorrect number of arguments) : cons

> ( Whether
  or
  not
  to
  be
  ?
)

> ( "Wake up!"
)

> ( 20
  myCons
)

> ( ( 1
    #<procedure ->
    3
    #<procedure +>
  )
  ( 25
    .
    #<procedure car>
  )
)

> sun-shine defined

> money defined

> ( 40
  shines
  bright
)

> a defined

> d defined

> b defined

> #<procedure />

> 90

> 20

> "Best"

> 20

> a defined

> ( ( OK?
    Correct?
  )
  ( OK?
    Correct?
  )
)

> 3240

> a defined

> "=============== Problem 6 viewable case ================="

> environment cleaned

> listOfStr defined

> listOfNum defined

> listOfSym defined

> operators defined

> abc defined

> 300

> -212

> ( #<procedure +>
  #<procedure ->
  #<procedure *>
  #<procedure />
)

> ( What?
  "When?"
  30.100
)

> ( 30.100
  "When?"
  What?
)

> 45.544

> abc defined

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ( What?
  ( 30.100
    "When?"
    What?
  )
)

> efg defined

> ( ( What?
    "When?"
    30.100
  )
  30.100
  "When?"
  What?
)

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> 60.544

> What? defined

> When? defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> 
Thanks for using OurScheme!